package hello.currencyconverter.application.mock;

import hello.currencyconverter.application.currency.domain.Currency;
import hello.currencyconverter.application.exchangerates.domain.ExchangeRates;
import hello.currencyconverter.application.exchangerates.service.port.ExchangeRateRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeExchangeRatesRepository implements ExchangeRateRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong();
    private final List<ExchangeRates> data = new ArrayList<>();

    @Override
    public ExchangeRates save(ExchangeRates exchangeRates) {
        if(exchangeRates.getId() == null || exchangeRates.getId() == 0) {
            ExchangeRates newExchangeRates = ExchangeRates.builder()
                    .id(autoGeneratedId.getAndIncrement())
                    .targetCurrency(exchangeRates.getTargetCurrency())
                    .baseCurrency(exchangeRates.getBaseCurrency())
                    .exchangeRate(exchangeRates.getExchangeRate())
                    .createDate(exchangeRates.getCreateDate())
                    .updateDate(exchangeRates.getUpdateDate())
                    .build();
            data.add(newExchangeRates);
            return newExchangeRates;
        } else{
            data.removeIf(item -> Objects.equals(item.getId(), exchangeRates.getId()));
            data.add(exchangeRates);
            return exchangeRates;
        }
    }

    @Override
    public Optional<ExchangeRates> findLastExchangeRate(String baseCode, String targetCode) {
        return data.stream()
                .filter(item ->
                        item.getBaseCurrency().getCode().equals(baseCode)
                                && item.getTargetCurrency().getCode().equals(targetCode))
                .sorted((item1, item2) -> Long.compare(item2.getId(), item1.getId()))
                .findFirst();
    }

    @Override
    public List<ExchangeRates> findAllExchangeRates(String baseCode, String targetCode) {
        return data.stream()
                .filter(item ->
                    item.getBaseCurrency().getCode().equals(baseCode)
                            && item.getTargetCurrency().getCode().equals(targetCode))
                .toList();
    }
}
