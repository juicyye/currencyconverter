package hello.currencyconverter.application.mock;

import hello.currencyconverter.application.currency.domain.Currency;
import hello.currencyconverter.application.currency.service.port.CurrencyRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCurrencyRepository implements CurrencyRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong();
    private final List<Currency> data = new ArrayList<>();
    @Override
    public Currency save(Currency currency) {
        if (currency.getId() == null || currency.getId() == 0) {
            Currency newCurrency = Currency.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(currency.getName())
                    .code(currency.getCode())
                    .symbol(currency.getSymbol())
                    .createDate(currency.getCreateDate())
                    .updateDate(currency.getUpdateDate())
                    .build();

            data.add(newCurrency);
            return newCurrency;
        } else{
            data.removeIf(item -> Objects.equals(item.getId(), currency.getId()));
            data.add(currency);
            return currency;
        }
    }

    @Override
    public Optional<Currency> findByCode(String currencyCode) {
        return data.stream().filter(item -> item.getCode().equals(currencyCode)).findFirst();
    }

    @Override
    public List<Currency> findAll() {
        return data;
    }
}
